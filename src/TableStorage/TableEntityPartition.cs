//<auto-generated/>
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Cosmos.Table;

namespace Devlooped
{
    /// <inheritdoc />
    partial class TableEntityPartition : ITablePartition<TableEntity>
    {
        readonly ITableRepository<TableEntity> repository;

        /// <summary>
        /// Initializes the repository with the given storage account and optional table name.
        /// </summary>
        /// <param name="storageAccount">The <see cref="CloudStorageAccount"/> to use to connect to the table.</param>
        /// <param name="tableName">The table that backs this table partition.</param>
        /// <param name="partitionKey">The fixed partition key that backs this table partition.</param>
        protected internal TableEntityPartition(CloudStorageAccount storageAccount, string tableName, string partitionKey)
        {
            TableName = tableName;
            PartitionKey = partitionKey;
            repository = new TableEntityRepository(storageAccount, TableName);
        }

        /// <inheritdoc />
        public string TableName { get; }

        /// <inheritdoc />
        public string PartitionKey { get; }

        /// <inheritdoc />
        public async Task DeleteAsync(TableEntity entity, CancellationToken cancellation = default)
        {
            if (!PartitionKey.Equals(entity.PartitionKey, StringComparison.Ordinal))
                throw new ArgumentException("Entity does not belong to the partition.");

            await repository.DeleteAsync(entity, cancellation);
        }

        /// <inheritdoc />
        public Task DeleteAsync(string rowKey, CancellationToken cancellation = default)
            => repository.DeleteAsync(PartitionKey, rowKey, cancellation);

        /// <inheritdoc />
        public IAsyncEnumerable<TableEntity> EnumerateAsync(CancellationToken cancellation = default) 
            => repository.EnumerateAsync(PartitionKey, cancellation);

        /// <inheritdoc />
        public Task<TableEntity?> GetAsync(string rowKey, CancellationToken cancellation = default)
            => repository.GetAsync(PartitionKey, rowKey, cancellation);

        /// <inheritdoc />
        public async Task<TableEntity> PutAsync(TableEntity entity, CancellationToken cancellation = default)
        {
            if (!PartitionKey.Equals(entity.PartitionKey, StringComparison.Ordinal))
                throw new ArgumentException("Entity does not belong to the partition.");

            return await repository.PutAsync(entity, cancellation);
        }
    }
}
