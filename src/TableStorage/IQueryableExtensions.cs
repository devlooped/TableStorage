//<auto-generated/>
#nullable enable
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Threading;

namespace Devlooped
{
    /// <summary>
    /// Extension method <see cref="GetAsyncEnumerator{TSource}(IQueryable{TSource}, CancellationToken)"/> to 
    /// allow native <c>await foreach</c> support for <see cref="IQueryable{T}"/> queries created from 
    /// the <see cref="ITableRepository{T}.CreateQuery"/> or <see cref="ITablePartition{T}.CreateQuery"/>, which 
    /// implement <see cref="IAsyncEnumerable{T}"/>.
    /// </summary>
    [EditorBrowsable(EditorBrowsableState.Never)]
    static partial class IQueryableExtensions
    {
        /// <summary>
        /// Gets the <see cref="IAsyncEnumerator{T}"/> for an <see cref="IQueryable{T}"/> that 
        /// implements <see cref="IAsyncEnumerable{T}"/>, for use with <c>await foreach</c>.
        /// </summary>
        /// <exception cref="ArgumentException">The <paramref name="source"/> does not implement 
        /// <see cref="IAsyncEnumerable{T}"/>.</exception>
        public static IAsyncEnumerator<TSource> GetAsyncEnumerator<TSource>(this IQueryable<TSource> source, CancellationToken cancellation = default)
        {
            if (source is not IAsyncEnumerable<TSource> enumerable)
                throw new ArgumentException("The source it not an async enumerable.", nameof(source));

            return enumerable.GetAsyncEnumerator(cancellation);
        }
    }
}
