//<auto-generated/>
#nullable enable
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Threading;

namespace Devlooped
{
    /// <summary>
    /// A specific partition within an <see cref="IDocumentRepository{T}"/>.
    /// </summary>
    /// <typeparam name="T">The type of entity being persisted.</typeparam>
    partial interface IDocumentPartition<T> : ITableStoragePartition<T> where T : class
    {
        /// <summary>
        /// Queries the document repository for items that match the given <paramref name="predicate"/>.
        /// </summary>
        /// <example>
        /// var books = DocumentPartition.Create&lt;Book&gt;();
        /// await foreach (var book in books.EnumerateAsync(x => 
        ///     x.PartitionKey == "Rick Riordan" && 
        ///     x.RowKey.CompareTo("Percy Jackson") >= 0 && 
        ///     x.Version == "1.0"))
        /// {
        ///    Console.WriteLine(book.ISBN);
        /// }
        /// </example>
        public IAsyncEnumerable<T> EnumerateAsync(Expression<Func<IDocumentEntity, bool>> predicate, CancellationToken cancellation = default);
    }
}
