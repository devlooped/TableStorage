//<auto-generated/>
#nullable enable
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Devlooped
{
    /// <summary>
    /// A specific partition within a <see cref="IDocumentRepository{T}"/>.
    /// </summary>
    /// <typeparam name="T">The type of entity being persisted.</typeparam>
    partial interface IDocumentPartition<T> where T : class
    {
        /// <summary>
        /// Gets the table name being used.
        /// </summary>
        string TableName { get; }

        /// <summary>
        /// Gets the partition key being used.
        /// </summary>
        string PartitionKey { get; }

        /// <summary>
        /// Enumerates asynchronously all entities in the partition..
        /// </summary>
        /// <param name="cancellation">Optional <see cref="CancellationToken"/>.</param>
        IAsyncEnumerable<T> EnumerateAsync(CancellationToken cancellation = default);

        /// <summary>
        /// Retrieves an entity from the partition given its <paramref name="rowKey"/>.
        /// </summary>
        /// <param name="rowKey">The entity row key.</param>
        /// <param name="cancellation">Optional <see cref="CancellationToken"/>.</param>
        /// <returns>The retrieved entity, or <see langword="null"/> if not found.</returns>
        Task<T?> GetAsync(string rowKey, CancellationToken cancellation = default);

        /// <summary>
        /// Writes an entity to the partition, overwriting an existing value, if any.
        /// </summary>
        /// <param name="entity">The entity to persist.</param>
        /// <param name="cancellation">Optional <see cref="CancellationToken"/>.</param>
        /// <returns>The saved entity.</returns>
        Task<T> PutAsync(T entity, CancellationToken cancellation = default);

        /// <summary>
        /// Deletes an entity from the partition.
        /// </summary>
        /// <param name="entity">The entity to delete.</param>
        /// <param name="cancellation">Optional <see cref="CancellationToken"/>.</param>
        Task DeleteAsync(T entity, CancellationToken cancellation = default);

        /// <summary>
        /// Deletes an entity from the partition given its <paramref name="rowKey"/>.
        /// </summary>
        /// <param name="rowKey">The entity row key.</param>
        /// <param name="cancellation">Optional <see cref="CancellationToken"/>.</param>
        Task DeleteAsync(string rowKey, CancellationToken cancellation = default);
    }
}
