//<auto-generated/>
#nullable enable
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Cosmos.Table;

namespace Devlooped
{
    /// <inheritdoc />
    partial class TablePartition<T> : ITablePartition<T> where T : class
    {
        readonly ITableRepository<T> repository;

        /// <summary>
        /// Initializes the repository with the given storage account and optional table name.
        /// </summary>
        /// <param name="storageAccount">The storage account to use.</param>
        /// <param name="tableName">Optional table name. If no value is provided, <see cref="DefaultTableName"/> will be used.</param>
        public TablePartition(CloudStorageAccount storageAccount, string tableName, string partitionKey, Func<T, string> rowKey)
        {
            TableName = tableName ?? TablePartition.GetDefaultTableName<T>();
            PartitionKey = partitionKey ?? TablePartition.GetDefaultPartitionKey<T>();
            repository = new TableRepository<T>(storageAccount,
                TableName,
                _ => PartitionKey,
                rowKey ?? RowKeyAttribute.CreateAccessor<T>());
        }

        /// <inheritdoc />
        public string TableName { get; }

        /// <inheritdoc />
        public string PartitionKey { get; }

        /// <inheritdoc />
        public Task DeleteAsync(T entity, CancellationToken cancellation = default)
            => repository.DeleteAsync(entity, cancellation);

        /// <inheritdoc />
        public Task DeleteAsync(string rowKey, CancellationToken cancellation = default)
            => repository.DeleteAsync(PartitionKey, rowKey, cancellation);
        
        /// <inheritdoc />
        public IAsyncEnumerable<T> EnumerateAsync(CancellationToken cancellation = default) 
            => repository.EnumerateAsync(PartitionKey, cancellation);

        /// <inheritdoc />
        public Task<T?> GetAsync(string rowKey, CancellationToken cancellation = default)
            => repository.GetAsync(PartitionKey, rowKey, cancellation);

        /// <inheritdoc />
        public Task<T> PutAsync(T entity, CancellationToken cancellation = default)
            => repository.PutAsync(entity, cancellation);
    }
}
