//<auto-generated/>
#nullable enable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Cosmos.Table;

namespace Devlooped
{
    /// <inheritdoc />
    partial class TablePartition<T> : ITablePartition<T> where T : class
    {
        readonly TableRepository<T> repository;

        /// <summary>
        /// Initializes the repository with the given storage account and optional table name.
        /// </summary>
        /// <param name="storageAccount">The <see cref="CloudStorageAccount"/> to use to connect to the table.</param>
        /// <param name="tableName">The table that backs this table partition.</param>
        /// <param name="partitionKey">The fixed partition key that backs this table partition.</param>
        /// <param name="rowKey">A function to determine the row key for an entity of type <typeparamref name="T"/> within the partition.</param>
        protected internal TablePartition(CloudStorageAccount storageAccount, string tableName, string partitionKey, Expression<Func<T, string>> rowKey)
        {
            TableName = tableName ?? TablePartition.GetDefaultTableName<T>();
            partitionKey ??= TablePartition.GetDefaultPartitionKey<T>();
            PartitionKey = partitionKey;

            repository = new TableRepository<T>(storageAccount,
                TableName,
                _ => partitionKey,
                rowKey ?? RowKeyAttribute.CreateAccessor<T>());
        }

        /// <inheritdoc />
        public string TableName { get; }

        /// <inheritdoc />
        public string PartitionKey { get; }

        /// <summary>
        /// The strategy to use when updating an existing entity.
        /// </summary>
        public UpdateStrategy UpdateStrategy 
        {
            get => repository.UpdateStrategy;
            set => repository.UpdateStrategy = value; 
        }

        /// <inheritdoc />
        public IQueryable<T> CreateQuery()
        {
            var query = (TableRepositoryQuery<T>)repository.CreateQuery();
            query.PartitionKey = PartitionKey;
            return query;
        }

        /// <inheritdoc />
        public Task<bool> DeleteAsync(T entity, CancellationToken cancellation = default)
            => repository.DeleteAsync(entity, cancellation);

        /// <inheritdoc />
        public Task<bool> DeleteAsync(string rowKey, CancellationToken cancellation = default)
            => repository.DeleteAsync(PartitionKey, rowKey, cancellation);
        
        /// <inheritdoc />
        public IAsyncEnumerable<T> EnumerateAsync(CancellationToken cancellation = default) 
            => repository.EnumerateAsync(PartitionKey, cancellation);

        /// <inheritdoc />
        public Task<T?> GetAsync(string rowKey, CancellationToken cancellation = default)
            => repository.GetAsync(PartitionKey, rowKey, cancellation);

        /// <inheritdoc />
        public Task<T> PutAsync(T entity, CancellationToken cancellation = default)
            => repository.PutAsync(entity, cancellation);
    }
}
