//<auto-generated/>
#nullable enable
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;

namespace Devlooped
{
    class EntityPropertiesMapper
    {
        static readonly ConcurrentDictionary<Type, PropertyInfo[]> propertiesMap = new();

        private EntityPropertiesMapper() { }

        internal static EntityPropertiesMapper Default { get; } = new EntityPropertiesMapper();

        public IDictionary<string, object> ToProperties<T>(T entity, string? partitionKeyProperty = default, string? rowKeyProperty = default) where T: notnull
        {
            var properties = propertiesMap.GetOrAdd(entity.GetType(), type => type
                .GetProperties()
                .Where(prop =>
                    prop.GetCustomAttribute<BrowsableAttribute>()?.Browsable != false &&
                    prop.Name != partitionKeyProperty &&
                    prop.Name != rowKeyProperty)
                .ToArray());

            var values = properties
                .Select(prop => new { prop.Name, Value = prop.GetValue(entity) })
                .Where(pair => pair.Value != null)
                .ToDictionary(
                    pair => pair.Name,
                    pair =>
#if NET6_0_OR_GREATER
                    pair.Value is DateOnly date ? 
                        date.ToString("O") : 
                        pair.Value.GetType().IsEnum ? 
                        pair.Value.ToString() : pair.Value!
#else
                    pair.Value.GetType().IsEnum ? pair.Value!.ToString() : pair.Value!
#endif
                    );

            return (IDictionary<string, object>)values;
        }
    }
}
