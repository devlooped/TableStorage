//<auto-generated/>
#nullable enable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Xml.Linq;

namespace Devlooped
{
    static class ExpressionExtensions
    {
        public static string? GetPropertyName<T, TResult>(this Expression<Func<T, TResult>>? expression)
        {
            if (expression == null)
                return null;

            var visitor = new PropertyVisitor();
            visitor.Visit(expression);

            // Support single-property accessor expressions only.
            // The attributed-property/ctor involves a more complex expression.
            if (visitor.Properties.Count == 1)
                return visitor.Properties[0].Name;

            return null;
        }

        class PropertyVisitor : ExpressionVisitor
        {
            bool skipProps = false;

            public List<PropertyInfo> Properties { get; } = new();

            protected override Expression VisitMember(MemberExpression node)
            {
                if (!skipProps && node.Member is PropertyInfo property)
                    Properties.Add(property);

                return base.VisitMember(node);
            }

            protected override Expression VisitMethodCall(MethodCallExpression node)
            {
                if (node.Method.GetCustomAttribute<NonMutatingAttribute>() != null)
                    return base.VisitMethodCall(node);

                return SkipProps(node, base.VisitMethodCall);
            }

            protected override Expression VisitBinary(BinaryExpression node)
                => SkipProps(node, base.VisitBinary);

            TResult SkipProps<T, TResult>(T arg, Func<T, TResult> func)
            {
                skipProps = true;
                try
                {
                    return func(arg);
                }
                finally
                {
                    skipProps = false;
                }
            }
        }
    }
}
