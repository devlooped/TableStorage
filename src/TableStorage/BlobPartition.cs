//<auto-generated/>
#nullable enable
#if NET8_0_OR_GREATER
using System;
using System.Collections.Concurrent;
using System.Reflection;

namespace Devlooped
{
    /// <summary>
    /// Factory methods to create <see cref="ITableStorage{T}"/> instances
    /// that store entities as a serialized document in blob storage.
    /// </summary>
    static partial class BlobPartition
    {
        /// <summary>
        /// Creates an <see cref="ITableStorage{T}"/> for the given entity type 
        /// <typeparamref name="T"/>, using <see cref="DocumentPartition.DefaultTableName"/> as the table name and the 
        /// <typeparamref name="T"/> <c>Name</c> as the partition key.
        /// </summary>
        /// <typeparam name="T">The type of entity that the repository will manage.</typeparam>
        /// <param name="storageAccount">The storage account to use.</param>
        /// <param name="rowKey">Function to retrieve the row key for a given entity.</param>
        /// <param name="serializer">Optional serializer to use instead of the default <see cref="DocumentSerializer.Default"/>.</param>
        /// <param name="includeProperties">Whether to serialize properties as columns too, like table repositories, for easier querying.</param>
        /// <returns>The new <see cref="ITablePartition{T}"/>.</returns>
        public static ITableStoragePartition<T> Create<T>(
            CloudStorageAccount storageAccount,
            Func<T, string> rowKey,
            IDocumentSerializer? serializer = default) where T : class
            => Create(storageAccount, DocumentPartition.DefaultTableName, typeof(T).Name, rowKey, serializer);

        /// <summary>
        /// Creates an <see cref="ITableStorage{T}"/> for the given entity type 
        /// <typeparamref name="T"/>.
        /// </summary>
        /// <typeparam name="T">The type of entity that the repository will manage.</typeparam>
        /// <param name="storageAccount">The storage account to use.</param>
        /// <param name="tableName">Optional table name to use. If not provided, the <typeparamref name="T"/> 
        /// <c>Name</c> will be used, unless a <see cref="TableAttribute"/> on the type overrides it.</param>
        /// <param name="partitionKey">Optional function to retrieve the partition key for a given entity. 
        /// If not provided, the class will need a property annotated with <see cref="PartitionKeyAttribute"/>.</param>
        /// <param name="rowKey">Optional function to retrieve the row key for a given entity. 
        /// If not provided, the class will need a property annotated with <see cref="RowKeyAttribute"/>.</param>
        /// <param name="serializer">Optional serializer to use instead of the default <see cref="DocumentSerializer.Default"/>.</param>
        /// <returns>The new <see cref="ITableStorage{T}"/>.</returns>
        public static ITableStoragePartition<T> Create<T>(
            CloudStorageAccount storageAccount,
            string? tableName = default,
            string? partitionKey = default,
            Func<T, string>? rowKey = default,
            IDocumentSerializer? serializer = default) where T : class
        {
            tableName ??= DocumentPartition.GetDefaultTableName<T>();
            partitionKey ??= TablePartition.GetDefaultPartitionKey<T>();
            rowKey ??= RowKeyAttribute.CreateCompiledAccessor<T>();
            serializer ??= DocumentSerializer.Default;

            return new BlobPartition<T>(storageAccount, tableName, partitionKey, rowKey, serializer);
        }
    }
}
#endif