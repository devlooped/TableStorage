//<auto-generated/>
#nullable enable
#if NET8_0_OR_GREATER
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using Mono.Linq.Expressions;

namespace Devlooped
{
    /// <inheritdoc />
    partial class BlobPartition<T> : ITableStoragePartition<T> where T : class
    {
        readonly BlobStorage<T> storage;

        /// <summary>
        /// Initializes the repository with the given storage account and optional table name.
        /// </summary>
        /// <param name="storageAccount">The <see cref="CloudStorageAccount"/> to use to connect to the table.</param>
        /// <param name="tableName">The table that backs this table partition.</param>
        /// <param name="partitionKey">The fixed partition key that backs this table partition.</param>
        /// <param name="rowKey">A function to determine the row key for an entity of type <typeparamref name="T"/> within the partition.</param>
        /// <param name="serializer">The serializer to use.</param>
        /// <param name="includeProperties">Whether to serialize properties as columns too, like table repositories, for easier querying.</param>
        protected internal BlobPartition(CloudStorageAccount storageAccount, string tableName, string partitionKey, Func<T, string> rowKey, IDocumentSerializer serializer, bool includeProperties = false)
        {
            PartitionKey = partitionKey ?? TablePartition.GetDefaultPartitionKey<T>();
            storage = new BlobStorage<T>(storageAccount, tableName, _ => PartitionKey, rowKey, serializer);
        }

        /// <inheritdoc />
        public string TableName => storage.TableName;

        /// <inheritdoc />
        public string PartitionKey { get; }

        /// <inheritdoc />
        public Task<bool> DeleteAsync(T entity, CancellationToken cancellation = default)
            => storage.DeleteAsync(entity, cancellation);

        /// <inheritdoc />
        public Task<bool> DeleteAsync(string rowKey, CancellationToken cancellation = default)
            => storage.DeleteAsync(PartitionKey, rowKey, cancellation);
        
        /// <inheritdoc />
        public IAsyncEnumerable<T> EnumerateAsync(CancellationToken cancellation = default) 
            => storage.EnumerateAsync(PartitionKey, cancellation);

        /// <inheritdoc />
        public Task<T?> GetAsync(string rowKey, CancellationToken cancellation = default)
            => storage.GetAsync(PartitionKey, rowKey, cancellation);

        /// <inheritdoc />
        public Task<T> PutAsync(T entity, CancellationToken cancellation = default)
            => storage.PutAsync(entity, cancellation);
    }
}
#endif