//<auto-generated/>
#nullable enable
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Devlooped
{
    /// <summary>
    /// Implementation of <see cref="IStringDocumentSerializer"/> which 
    /// uses Newtonsoft.Json implementation for serialization.
    /// </summary>
    partial class JsonDocumentSerializer : IStringDocumentSerializer
    {
        /// <summary>
        /// Default serializer settings to use for the <see cref="Default"/> singleton 
        /// document serialier.
        /// </summary>
        /// <remarks>
        /// Default settings are: 
        /// <para>
        /// - <see cref="JsonSerializerSettings.Converters"/> with <see cref="IsoDateTimeConverter"/> configured with 
        /// <see cref="IsoDateTimeConverter.DateTimeStyles"/> = <see cref="DateTimeStyles.AdjustToUniversal"/> and 
        /// <see cref="IsoDateTimeConverter.DateTimeFormat"/> = <c>"yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffK"</c>
        /// </para>
        /// <para>
        /// - <see cref="JsonSerializerSettings.Formatting"/> = <see cref="Formatting.Indented"/></para>
        /// <para>
        /// - <see cref="JsonSerializerSettings.NullValueHandling"/> = <see cref="NullValueHandling.Ignore"/>
        /// </para>
        /// </remarks>
        public static JsonSerializerSettings DefaultSettings { get; } = new JsonSerializerSettings
        {
            Converters =
            {
                new IsoDateTimeConverter
                {
                    DateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffK",
                    DateTimeStyles = DateTimeStyles.AdjustToUniversal
                },
            },
            DateFormatHandling = DateFormatHandling.IsoDateFormat,
            DateFormatString = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffK",
            Formatting = Formatting.Indented,
            NullValueHandling = NullValueHandling.Ignore,
        };

        /// <summary>
        /// Default instance of the serializer, using the <see cref="DefaultSettings"/>.
        /// </summary>
        public static IDocumentSerializer Default { get; } = new JsonDocumentSerializer();

        readonly JsonSerializerSettings settings;

        /// <summary>
        /// Initializes the document serializer using the <see cref="DefaultSettings"/>.
        /// </summary>
        public JsonDocumentSerializer()
            : this(DefaultSettings) { }

        /// <summary>
        /// Initializes the document serializer using the given <see cref="JsonSerializerSettings"/>.
        /// </summary>
        public JsonDocumentSerializer(JsonSerializerSettings settings) => this.settings = settings;

        /// <inheritdoc />
        public T? Deserialize<T>(string data) => JsonConvert.DeserializeObject<T>(data, settings);

        /// <inheritdoc />
        public string Serialize<T>(T value) => JsonConvert.SerializeObject(value, settings);
    }
}
