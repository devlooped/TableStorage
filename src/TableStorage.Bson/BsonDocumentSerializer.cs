//<auto-generated/>
#nullable enable
using System;
using System.Globalization;
using System.IO;
using Newtonsoft.Json;

namespace Devlooped
{
    /// <summary>
    /// Implementation of <see cref="IBinaryDocumentSerializer"/> which 
    /// uses Newtonsoft.Json implementation of BSON for serialization.
    /// </summary>
    partial class BsonDocumentSerializer : IBinaryDocumentSerializer
    {
        static readonly JsonSerializer serializer =
#if NET6_0_OR_GREATER
            JsonSerializer.Create(new JsonSerializerSettings
            {
                Converters =
                {
                    new DateOnlyJsonConverter(),
                }
            });
#else
            new JsonSerializer();
#endif

        /// <summary>
        /// Default instance of the serializer.
        /// </summary>
        public static IDocumentSerializer Default { get; } = new BsonDocumentSerializer();

        /// <inheritdoc />
        public T? Deserialize<T>(Stream data)
        {
            if (data.Length == 0)
                return default;

            var reader = new Newtonsoft.Json.Bson.BsonDataReader(data);
            return (T?)serializer.Deserialize<T>(reader);
        }

        /// <inheritdoc />
        public void Serialize<T>(T value, Stream stream)
        {
            if (value == null)
                return;

            var writer = new Newtonsoft.Json.Bson.BsonDataWriter(stream);
            serializer.Serialize(writer, value);
            writer.Flush();
        }

#if NET6_0_OR_GREATER
        class DateOnlyJsonConverter : JsonConverter<DateOnly>
        {
            public override DateOnly ReadJson(JsonReader reader, Type objectType, DateOnly existingValue, bool hasExistingValue, JsonSerializer serializer)
                => DateOnly.Parse((string)reader.Value!, CultureInfo.InvariantCulture);

            public override void WriteJson(JsonWriter writer, DateOnly value, JsonSerializer serializer)
                => writer.WriteValue(value.ToString("O", CultureInfo.InvariantCulture));
        }
#endif
    }
}
