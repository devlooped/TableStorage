//<auto-generated/>
#nullable enable
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using Azure.Data.Tables;
using Mono.Linq.Expressions;

namespace Devlooped;

/// <inheritdoc />
public partial class MemoryPartition<T> : ITablePartition<T>, IDocumentPartition<T> where T : class
{
    readonly MemoryRepository<T> repository;

    /// <summary>
    /// Initializes the repository with the given storage account and optional table name.
    /// </summary>
    /// <param name="storageAccount">The <see cref="CloudStorageAccount"/> to use to connect to the table.</param>
    public MemoryPartition()
        : this(TablePartition.GetDefaultTableName<T>(),
              TablePartition.GetDefaultPartitionKey<T>(), 
              RowKeyAttribute.CreateAccessor<T>())
    { }

    /// <summary>
    /// Initializes the repository with the given storage account and optional table name.
    /// </summary>
    /// <param name="tableName">The table that backs this table partition.</param>
    public MemoryPartition(string tableName)
        : this(tableName ?? TablePartition.GetDefaultTableName<T>(),
              TablePartition.GetDefaultPartitionKey<T>(),
              RowKeyAttribute.CreateAccessor<T>())
    { }

    /// <summary>
    /// Initializes the repository with the given storage account and optional table name.
    /// </summary>
    /// <param name="tableName">The table that backs this table partition.</param>
    /// <param name="partitionKey">The fixed partition key that backs this table partition.</param>
    public MemoryPartition(string tableName, string partitionKey)
        : this(tableName ?? TablePartition.GetDefaultTableName<T>(), 
              partitionKey, 
              RowKeyAttribute.CreateAccessor<T>())
    { }

    /// <summary>
    /// Initializes the repository with the given storage account and optional table name.
    /// </summary>
    /// <param name="tableName">The table that backs this table partition.</param>
    /// <param name="partitionKey">The fixed partition key that backs this table partition.</param>
    /// <param name="rowKey">A function to determine the row key for an entity of type <typeparamref name="T"/> within the partition.</param>
    public MemoryPartition(string tableName, string partitionKey, Expression<Func<T, string>> rowKey)
    {
        partitionKey ??= TablePartition.GetDefaultPartitionKey<T>();
        PartitionKey = partitionKey;

        repository = new MemoryRepository<T>(tableName, _ => partitionKey,
            rowKey ?? RowKeyAttribute.CreateAccessor<T>());
    }

    /// <inheritdoc />
    public string TableName => repository.TableName;

    /// <inheritdoc />
    public string PartitionKey { get; }

    /// <inheritdoc />
    public IQueryable<T> CreateQuery() => repository.CreateQuery(PartitionKey);

    /// <inheritdoc />
    public Task<bool> DeleteAsync(T entity, CancellationToken cancellation = default)
    {
        if (entity is TableEntity te && !PartitionKey.Equals(te.PartitionKey, StringComparison.Ordinal))
            throw new ArgumentException("Entity does not belong to the partition.");

        return repository.DeleteAsync(entity, cancellation);
    }

    /// <inheritdoc />
    public Task<bool> DeleteAsync(string rowKey, CancellationToken cancellation = default)
        => repository.DeleteAsync(PartitionKey, rowKey, cancellation);
    
    /// <inheritdoc />
    public IAsyncEnumerable<T> EnumerateAsync(CancellationToken cancellation = default) 
        => repository.EnumerateAsync(PartitionKey, cancellation);

    /// <inheritdoc />
    public IAsyncEnumerable<T> EnumerateAsync(Expression<Func<IDocumentEntity, bool>> predicate, CancellationToken cancellation = default)
        => repository.EnumerateAsync(predicate.AndAlso(x => x.PartitionKey == PartitionKey), cancellation);

    /// <inheritdoc />
    public Task<T?> GetAsync(string rowKey, CancellationToken cancellation = default)
        => repository.GetAsync(PartitionKey, rowKey, cancellation);

    /// <inheritdoc />
    public Task<T> PutAsync(T entity, CancellationToken cancellation = default)
    {
        if (entity is TableEntity te && !PartitionKey.Equals(te.PartitionKey, StringComparison.Ordinal))
            throw new ArgumentException("Entity does not belong to the partition.");

        return repository.PutAsync(entity, cancellation);
    }
}
