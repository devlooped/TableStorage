//<auto-generated/>
#nullable enable
using System;
using System.Collections.Concurrent;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using Azure.Data.Tables;

namespace Devlooped;

/// <summary>
/// Factory methods to create <see cref="ITablePartition{T}"/> instances 
/// that store entities using individual columns for entity properties.
/// </summary>
public static partial class MemoryPartition
{
    /// <summary>
    /// Default table name to use when a value is not not provided 
    /// (or overriden via <see cref="TableAttribute"/>), which is <c>Entities</c>.
    /// </summary>
    public const string DefaultTableName = "Entities";

    /// <summary>
    /// Creates an <see cref="ITablePartition{ITableEntity}"/>.
    /// </summary>
    /// <param name="tableName">Table name to use.</param>
    /// <param name="partitionKey">Fixed partition key to scope entity persistence.</param>
    /// <returns>The new <see cref="ITablePartition{TEntity}"/>.</returns>
    public static MemoryPartition<TableEntity> Create(string tableName, string partitionKey)
        => new MemoryPartition<TableEntity>(tableName, partitionKey, x => x.RowKey);

    /// <summary>
    /// Creates an <see cref="ITablePartition{T}"/> for the given entity type 
    /// <typeparamref name="T"/>, using <see cref="DefaultTableName"/> as the table name and the 
    /// <typeparamref name="T"/> <c>Name</c> as the partition key.
    /// </summary>
    /// <typeparam name="T">The type of entity that the repository will manage.</typeparam>
    /// <param name="tableName">Table name to use.</param>
    /// <param name="rowKey">Function to retrieve the row key for a given entity.</param>
    /// <returns>The new <see cref="ITablePartition{T}"/>.</returns>
    public static MemoryPartition<T> Create<T>(
        string tableName, 
        Expression<Func<T, string>> rowKey) where T : class
        => Create<T>(DefaultTableName, default, rowKey);

    /// <summary>
    /// Creates an <see cref="ITablePartition{T}"/> for the given entity type 
    /// <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">The type of entity that the repository will manage.</typeparam>
    /// <param name="tableName">Optional table name to use. If not provided, <see cref="DefaultTableName"/> 
    /// will be used, unless a <see cref="TableAttribute"/> on the type overrides it.</param>
    /// <param name="partitionKey">Optional fixed partition key to scope entity persistence. 
    /// If not provided, the <typeparamref name="T"/> <c>Name</c> will be used.</param>
    /// <param name="rowKey">Optional function to retrieve the row key for a given entity. 
    /// If not provided, the class will need a property annotated with <see cref="RowKeyAttribute"/>.</param>
    /// <returns>The new <see cref="ITablePartition{T}"/>.</returns>
    public static MemoryPartition<T> Create<T>(
        string? tableName = default,
        string? partitionKey = null,
        Expression<Func<T, string>>? rowKey = null) where T : class
    {
        partitionKey ??= TablePartition.GetDefaultPartitionKey<T>();
        rowKey ??= RowKeyAttribute.CreateAccessor<T>();

        return new MemoryPartition<T>(tableName ?? TablePartition.GetDefaultTableName<T>(), partitionKey, rowKey);
    }
}